import { defineStore } from 'pinia';
import {allPointPosition} from '@/stores/points.js';
export const cityDistance=[
	    [0, 110, 224, 406, 452, 622, 860, 1250, 1074, 925, 1127, 899, 1548, 1250, 364, 623, 1055, 1338, 1886, 2048, 2287, 1465, 1518, 1734, 2087, 2518, 912, 1191, 1754, 921, 2406],
	    [110, 0, 193, 430, 555, 601, 859, 1273, 967, 821, 1023, 809, 1455, 1168, 274, 579, 987, 1274, 1815, 1999, 2225, 1449, 1521, 1704, 2070, 2560, 912, 1234, 1814, 971, 2499],
	    [224, 193, 0, 259, 532, 793, 1052, 1462, 941, 772, 966, 706, 1355, 1040, 202, 399, 835, 1116, 1667, 1824, 2064, 1257, 1328, 1516, 1879, 2387, 720, 1066, 1662, 812, 2409],
	    [406, 430, 259, 0, 446, 1023, 1266, 1645, 1109, 924, 1100, 796, 1418, 1068, 417, 359, 826, 1074, 1636, 1720, 1996, 1080, 1115, 1370, 1699, 2132, 514, 808, 1403, 553, 2182],
	    [452, 555, 532, 446, 0, 970, 1137, 1418, 1472, 1302, 1494, 1214, 1852, 1510, 733, 803, 1271, 1517, 2079, 2135, 2427, 1441, 1414, 1755, 2038, 2226, 873, 940, 1410, 669, 1962],
	    [622, 601, 793, 1023, 970, 0, 282, 742, 1190, 1130, 1314, 1230, 1809, 1607, 791, 1153, 1488, 1779, 2276, 2532, 2715, 2040, 2121, 2276, 2659, 3138, 1513, 1812, 2358, 1540, 2899],
	    [860, 859, 1052, 1266, 1137, 282, 0, 465, 1449, 1403, 1581, 1511, 2079, 1887, 1068, 1426, 1770, 2061, 2556, 2813, 2997, 2307, 2377, 2551, 2928, 3348, 1769, 2031, 2546, 1755, 2995],
	    [1250, 1273, 1462, 1645, 1418, 742, 465, 0, 1911, 1867, 2045, 1971, 2544, 2349, 1508, 1852, 2221, 2513, 3017, 3259, 3454, 2715, 2760, 2977, 3337, 3640, 2158, 2353, 2808, 2078, 3096],
	    [1074, 967, 941, 1109, 1472, 1190, 1449, 1911, 0, 192, 166, 411, 651, 612, 739, 837, 695, 890, 1214, 1606, 1674, 1459, 1667, 1532, 1965, 2907, 1226, 1732, 2359, 1564, 3269],
	    [925, 821, 772, 924, 1302, 1130, 1403, 1867, 192, 0, 202, 237, 679, 528, 574, 644, 546, 779, 1179, 1525, 1635, 1302, 1499, 1405, 1835, 2731, 1038, 1542, 2169, 1372, 3077],
	    [1127, 1023, 966, 1100, 1494, 1314, 1581, 2045, 166, 202, 0, 330, 501, 452, 772, 792, 567, 735, 1049, 1441, 1509, 1327, 1546, 1380, 1813, 2792, 1147, 1659, 2280, 1513, 3225],
	    [899, 809, 706, 796, 1214, 1230, 1511, 1971, 411, 237, 330, 0, 650, 377, 536, 467, 317, 578, 1046, 1338, 1487, 1066, 1262, 1182, 1609, 2497, 821, 1332, 1955, 1183, 2896],
	    [1548, 1455, 1355, 1418, 1852, 1809, 2079, 2544, 651, 679, 501, 650, 0, 374, 1184, 1063, 635, 575, 606, 1073, 1056, 1227, 1481, 1155, 1565, 2712, 1278, 1771, 2347, 1699, 3383],
	    [1250, 1168, 1040, 1068, 1510, 1607, 1887, 2349, 612, 528, 452, 377, 374, 0, 895, 709, 262, 288, 669, 1000, 1115, 923, 1164, 935, 1366, 2411, 905, 1403, 1991, 1325, 3013],
	    [364, 274, 202, 417, 733, 791, 1068, 1508, 739, 574, 772, 536, 1184, 895, 0, 370, 722, 1012, 1545, 1751, 1962, 1260, 1369, 1485, 1873, 2491, 776, 1189, 1804, 956, 2595],
	    [623, 579, 399, 359, 803, 1153, 1426, 1852, 837, 644, 792, 467, 1063, 709, 370, 0, 469, 731, 1290, 1425, 1672, 890, 1005, 1127, 1506, 2165, 434, 909, 1538, 728, 2436],
	    [1055, 987, 835, 826, 1271, 1488, 1770, 2221, 695, 546, 567, 317, 635, 262, 722, 469, 0, 292, 832, 1047, 1240, 763, 979, 864, 1292, 2226, 648, 1153, 1753, 1064, 2758],
	    [1338, 1274, 1116, 1074, 1517, 1779, 2061, 2513, 890, 779, 735, 578, 575, 288, 1012, 731, 292, 0, 562, 761, 951, 655, 907, 647, 1079, 2144, 775, 1230, 1782, 1205, 2840],  
		[1886, 1815, 1667, 1636, 2079, 2276, 2556, 3017, 1214, 1179, 1049, 1046, 606, 669, 1545, 1290, 832, 562, 0, 510, 488, 585, 960, 652, 1152, 2316, 1318, 1742, 2224, 1694, 3075],
		[2048, 1999, 1824, 1720, 2135, 2532, 2813, 3259, 1606, 1525, 1441, 1338, 1073, 1000, 1751, 1425, 1047, 761, 510, 0, 679, 283, 951, 598, 1193, 2028, 1740, 1947, 2346, 1834, 2816],
		[2287, 2225, 2064, 1996, 2427, 2715, 2997, 3454, 1674, 1635, 1509, 1487, 1056, 1115, 1962, 1672, 1240, 951, 488, 679, 0, 899, 1063, 1065, 1481, 2420, 1444, 1875, 2386, 1839, 3176],
		[1465, 1449, 1257, 1080, 1441, 2040, 2307, 2715, 1459, 1302, 1327, 1066, 1227, 923, 1260, 890, 763, 655, 585, 283, 899, 0, 818, 402, 921, 1670, 1240, 1508, 1847, 1336, 2238],
		[1518, 1521, 1328, 1115, 1414, 2121, 2377, 2760, 1667, 1499, 1546, 1262, 1481, 1164, 1369, 1005, 979, 907, 960, 951, 1063, 818, 0, 1037, 1612, 1361, 1260, 1342, 1692, 1200, 2431],
		[1734, 1704, 1516, 1370, 1755, 2276, 2551, 2977, 1532, 1405, 1380, 1182, 1155, 935, 1485, 1127, 864, 647, 652, 598, 1065, 402, 1037, 0, 683, 1662, 1440, 1438, 1801, 1376, 2401],
		[2087, 2070, 1879, 1699, 2038, 2659, 2928, 3337, 1965, 1835, 1813, 1609, 1565, 1366, 1873, 1506, 1292, 1079, 1152, 1193, 1481, 921, 1612, 683, 0, 1681, 1993, 1882, 2300, 1867, 3068],
		[2518, 2560, 2387, 2132, 2226, 3138, 3348, 3640, 2907, 2731, 2792, 2497, 2712, 2411, 2491, 2165, 2226, 2144, 2316, 2028, 2420, 1670, 1361, 1662, 1681, 0, 2160, 1800, 2105, 1757, 1398],
		[912, 912, 720, 514, 873, 1513, 1769, 2158, 1226, 1038, 1147, 821, 1278, 905, 776, 434, 648, 775, 1318, 1740, 1444, 1240, 1260, 1440, 1993, 2160, 0, 600, 1176, 471, 2204],
		[1191, 1234, 1066, 808, 940, 1812, 2031, 2353, 1732, 1542, 1659, 1332, 1771, 1403, 1189, 909, 1153, 1230, 1742, 1947, 1875, 1508, 1342, 1438, 1882, 1800, 600, 0, 703, 453, 1814],
		[1754, 1814, 1662, 1403, 1410, 2358, 2546, 2808, 2359, 2169, 2280, 1955, 2347, 1991, 1804, 1538, 1753, 1782, 2224, 2346, 2386, 1847, 1692, 1801, 2300, 2105, 1176, 703, 0, 636, 1136],
		[921, 971, 812, 553, 669, 1540, 1755, 2078, 1564, 1372, 1513, 1183, 1699, 1325, 956, 728, 1064, 1205, 1694, 1834, 1839, 1336, 1200, 1376, 1867, 1757, 471, 453, 636, 0, 1455],
		[2406, 2499, 2409, 2182, 1962, 2899, 2995, 3096, 3269, 3077, 3225, 2896, 3383, 3013, 2595, 2436, 2758, 2840, 3075, 2816, 3176, 2238, 2431, 2401, 3068, 1398, 2204, 1814, 1136, 1455, 0]
]

export const cityIndex = {
	'哈尔滨': 7,
	'长春': 6,
	'沈阳': 5,
	'乌鲁木齐': 30,
	'呼和浩特': 4,
	'北京': 0,
	'银川': 29,
	'太原': 3,
	'济南': 14,
	'西安': 26,
	'郑州': 15,
	'成都': 22,
	'重庆': 21,
	'武汉': 16,
	'南京': 9,
	'上海': 8,
	'杭州': 10,
	'长沙': 17,
	'昆明': 24,
	'福州': 12
};

export function getCityIndex(cityName) {
	if (cityName in cityIndices) {
		return cityIndices[cityName];
	} else {
		return "城市名称不在列表中";
	}
}

export const citiesCap = [
	{ name: '北京', capacity: 10 },
	{ name: '天津', capacity: 10 },
	{ name: '石家庄', capacity: 10 },
	{ name: '太原', capacity: 10 },
	{ name: '呼和浩特', capacity: 10 },
	{ name: '沈阳', capacity: 100 },
	{ name: '长春', capacity: 10 },
	{ name: '哈尔滨', capacity: 10 },
	{ name: '上海', capacity: 10 },
	{ name: '南京', capacity: 10 },
	{ name: '杭州', capacity: 10 },
	{ name: '合肥', capacity: 10 },
	{ name: '福州', capacity: 10 },
	{ name: '南昌', capacity: 10 },
	{ name: '济南', capacity: 10 },
	{ name: '郑州', capacity: 10 },
	{ name: '武汉', capacity: 10 },
	{ name: '长沙', capacity: 10 },
	{ name: '广州', capacity: 10 },
	{ name: '南宁', capacity: 10 },
	{ name: '海口', capacity: 10 },
	{ name: '重庆', capacity: 10 },
	{ name: '成都', capacity: 10 },
	{ name: '贵阳', capacity: 10 },
	{ name: '昆明', capacity: 100 },
	{ name: '拉萨', capacity: 10 },
	{ name: '西安', capacity: 10 },
	{ name: '兰州', capacity: 10 },
	{ name: '西宁', capacity: 10 },
	{ name: '银川', capacity: 10 },
	{ name: '乌鲁木齐', capacity: 10 }
];

export function getDistanceObjects(cityIndex, cityDistance) {
	const cities = Object.keys(cityIndex);
	const indexes = Object.values(cityIndex);
	const result = [];
    // console.log(cities)
	// console.log(indexes)
	for (let i = 0; i < cities.length; i++) {
		for (let j = i + 1; j < cities.length; j++) {
			const cityA = cities[i];
			const cityB = cities[j];
			const indexA = indexes[i]
			const indexB = indexes[j];
			const distance = cityDistance[indexA][indexB]/1.5;
			if(distance > 1200)continue;
			const cost = distance + Math.floor(distance / 360) * 90;
			// console.log(cityA, cityB, distance, cost);
			result.push({ u: cityA, v: cityB, len: cost });
		}
	}
	console.log('result:',result)
	return result;
}

let cityPosArr = allPointPosition.value
export function getPositionByName(cityName) {
	for (const city of cityPosArr) {
		if (city.name === cityName) {
			return { Lng: city.position[0], Lat: city.position[1] };
		}
	}
	return null; // 如果未找到该城市，返回null
}

export function getPathPositions(paths) {
	return paths.map(pathObj => {
		return pathObj.path.map(cityName => getPositionByName(cityName));
	});
}

export const finalRoute = []


